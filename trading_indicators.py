# -*- coding: utf-8 -*-
"""Trading Indicators.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UObCAsPNo9-lXnUVTrQkbNXQJulPS8W7
"""

import requests
import json
import pandas as pd

# Define the GraphQL query
query = """
{
  EVM(dataset: combined) {
    DEXTradeByTokens(
      orderBy: {descendingByField: "Block_Time"},
      where: {
        Trade: {
          Side: {
            Currency: { SmartContract: { is: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2" } }
          },
          Currency: { SmartContract: { is: "0xdac17f958d2ee523a2206206994597c13d831ec7" } }
        }
      },
      limit: { count: 10 }
    ) {
      Block {
        Time(interval: { in: minutes, count: 10 })
      }
      volume: sum(of: Trade_Amount)
      Trade {
        high: Price(maximum: Trade_Price)
        low: Price(minimum: Trade_Price)
        open: Price(minimum: Block_Number)
        close: Price(maximum: Block_Number)
      }
      count
    }
  }
}
"""

# Set up the request payload and headers
url = "https://streaming.bitquery.io/graphql"
payload = json.dumps({"query": query, "variables": "{}"})
headers = {
    'Content-Type': 'application/json',
    'X-API-KEY': 'keyy'
}

# Make the API request
response = requests.request("POST", url, headers=headers, data=payload)

# Extract trade data
response_data_trades = json.loads(response.text)['data']['EVM']['DEXTradeByTokens']
df = pd.DataFrame(response_data_trades)

# Extract 'Trade' data into a DataFrame
df_trade = pd.json_normalize(df['Trade'])

# Calculate Simple Moving Average (SMA)
sma = df_trade['close'].rolling(window=10).mean().iloc[9]
print("SMA:", sma)

# Calculate Daily Returns
close_last = df_trade['close'].iloc[-1]
close_last_1 = df_trade['close'].iloc[-2]
daily_return = ((close_last - close_last_1) / close_last_1) * 100
print("Daily Return:", daily_return)

# Calculate Relative Strength Index (RSI)
df_trade['diff_close'] = df_trade['close'].diff(1)
df_trade['gain'] = df_trade['diff_close'].clip(lower=0).round(2)
df_trade['loss'] = df_trade['diff_close'].clip(upper=0).abs().round(2)

window_length = 9
df_trade['avg_gain'] = df_trade['gain'].rolling(window=window_length, min_periods=window_length).mean()[:window_length+1]
df_trade['avg_loss'] = df_trade['loss'].rolling(window=window_length, min_periods=window_length).mean()[:window_length+1]

for i in range(window_length+1, len(df_trade)):
    df_trade.loc[i, 'avg_gain'] = ((df_trade.loc[i-1, 'avg_gain'] * (window_length - 1)) + df_trade.loc[i, 'gain']) / window_length
    df_trade.loc[i, 'avg_loss'] = ((df_trade.loc[i-1, 'avg_loss'] * (window_length - 1)) + df_trade.loc[i, 'loss']) / window_length

df_trade['rs'] = df_trade['avg_gain'] / df_trade['avg_loss']
df_trade['rsi'] = 100 - (100 / (1.0 + df_trade['rs']))
print("RSI",df_trade['rsi'][window_length])
